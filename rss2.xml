<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>关爱颈椎成长协会</title>
    <link>https://ningoy.github.io/</link>
    <atom:link href="/ningoy.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Mon, 27 Jan 2020 10:45:35 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Linux系统使用一周记</title>
      <link>https://ningoy.github.io/2018/05/30/Linux%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E4%B8%80%E5%91%A8%E8%AE%B0/</link>
      <guid>https://ningoy.github.io/2018/05/30/Linux%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E4%B8%80%E5%91%A8%E8%AE%B0/</guid>
      <pubDate>Wed, 30 May 2018 00:30:50 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;之前接触&lt;code&gt;Linux&lt;/code&gt; 系统都是在虚拟机里，第一次用的是&lt;code&gt;Ubuntu&lt;/code&gt; ，之后又试了试&lt;code&gt;Debian&lt;/code&gt; 。但是貌似只是在里面试了试几个命令就不了了之了。一来在虚拟机里响应速度比较慢，二来想要打开这个系统得先
        
      
      </description>
      
      <content:encoded><![CDATA[<p>之前接触<code>Linux</code> 系统都是在虚拟机里，第一次用的是<code>Ubuntu</code> ，之后又试了试<code>Debian</code> 。但是貌似只是在里面试了试几个命令就不了了之了。一来在虚拟机里响应速度比较慢，二来想要打开这个系统得先启动<code>Windows</code>，再打开<code>VMware</code>， 太笨重了。再者说，当时也实在没有什么切实的需求，所以用起来也不得劲。<br>不过后来慢慢发现，<code>Linux</code> 系统最大的优势在于他对于开发者的友好（买不起苹果），实际体验过后也确实是这样。但同时，也对普通用户十分不友好，如果不能看报错信息，自己解决问题，还是远离<code>Linux</code> 系统吧。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Deepin"><a href="#Deepin" class="headerlink" title="Deepin"></a>Deepin</h3><p>这一次选择的<code>Linux</code>发行版是<code>Deepin</code>，想到毕竟是国人开发，应该会比较在意国人的需求。果然，在深度商店里就可以直接安装<code>Tim</code>，<code>WeChat</code>，<code>搜狗输入法</code>等软件。再一个就是，<code>Deepin</code>打的口号就是“免除新手痛苦，节省老手时间”，提供了<code>out-of-box</code>的使用体验，对我这样的新手可以说是很友好了。</p><p><em>深度桌面</em></p><p><img src="http://op7aviu2v.bkt.clouddn.com/%E6%B7%B1%E5%BA%A6%E6%A1%8C%E9%9D%A2_Desktop_20180530092252.png" alt="深度桌面"></p><p><em>深度终端</em></p><p><img src="http://op7aviu2v.bkt.clouddn.com/%E6%B7%B1%E5%BA%A6%E7%BB%88%E7%AB%AF_deepin-terminal_20180530092023.png" alt="深度终端"></p><p><em>深度启动器</em></p><p><img src="http://op7aviu2v.bkt.clouddn.com/%E6%B7%B1%E5%BA%A6%E5%90%AF%E5%8A%A8%E5%99%A8_dde-launcher_20180530092326.png" alt="深度启动器"></p><p><em>深度文件管理</em></p><p><img src="http://op7aviu2v.bkt.clouddn.com/%E6%B7%B1%E5%BA%A6%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86_dde-file-manager_20180530092440.png" alt="深度文件管理"></p><h3 id="使用U盘安装"><a href="#使用U盘安装" class="headerlink" title="使用U盘安装"></a>使用U盘安装</h3><p>因为非常舍不得<code>Windows</code>，所以选择<code>Windows</code>和<code>Deepin</code>双系统，打游戏在<code>Windows</code>上，开发在<code>Deepin</code>上。先在<code>Windows</code>上用<code>磁盘管理</code>释放了50G可用空间，打算20G挂载在<code>/</code>目录下，30G挂载在<code>~</code>目录下。之后在<code>Windows</code>上</p><ol><li>下载深度启动盘制作工具和官方最新的镜像文件</li><li>插入U盘到电脑的USB接口中</li><li>打开深度启动盘制作工具</li><li>选择深度操作系统镜像文件以及分区</li><li>点击<code>开始</code>即可制作</li><li>进入电脑<code>BOIS</code>界面将U盘设置为第一启动项，关闭安全启动，重启电脑</li><li>之后就进入<code>Deepin</code>的安装界面了</li></ol><h3 id="工具推荐"><a href="#工具推荐" class="headerlink" title="工具推荐"></a>工具推荐</h3><p>所推荐的这些工具，都是基于个人偏好和工作所需，并不一定适合所有人，各取所需就好。</p><h4 id="miniconda"><a href="#miniconda" class="headerlink" title="miniconda"></a>miniconda</h4><p><code>conda</code>是类似于<code>npm</code>或<code>maven</code>的包管理工具，只是<code>conda</code>是针对<code>python</code>的。可以安装<code>miniconda</code>或<code>anaconda</code>进行安装，<code>anaconda</code>是一个用于科学计算的<code>python</code>发行版，包含了众多流行的科学计算、数据分析的<code>python</code>包。<code>miniconda</code>是一个<code>anaconda</code>的轻量级替代，默认只包含了<code>python</code>和<code>conda</code>，但是可以通过<code>pip</code>和<code>conda</code>来安装所需要的包。</p><h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><p>可以通过<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/" target="_blank" rel="noopener">清华大学开源软件镜像站</a>下载，比从官网直接下载会快一些。下载之后双击打开就可以安装了。</p><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p><code>conda list</code>列出当前环境下的所有包<br><code>conda list -n env_name</code>列出一个虚拟环境下的所有包<br><code>conda install package</code>为当前环境安装某个包<br><code>conda install -n env_name package_name</code>为某个虚拟环境安装某个包<br><code>conda env list</code>列出所有<code>conda</code>下的虚拟环境<br><code>conda create --name env_name python=x.x</code>创建指定<code>python</code>版本的虚拟环境<br><code>source activate env_name</code>进入某个虚拟环境<br><code>conda env export &gt; environment.yml</code>生成当前的环境配置<br><code>conda remove --name env_name --all</code>删除某个环境<br><code>source deactivate</code>退出某个环境</p><h4 id="vim-nox"><a href="#vim-nox" class="headerlink" title="vim-nox"></a>vim-nox</h4><p>之所以会提到这个，是因为<code>Deepin</code>原生的<code>vim</code>不支持<code>python2</code>和<code>python3</code>，需要重新编译。但是编译起来太麻烦了，刚好<code>vim-nox</code>支持多种脚本语言，所以就直接用这个好了。</p><h4 id="autojump"><a href="#autojump" class="headerlink" title="autojump"></a>autojump</h4><p><code>autojump</code>插件可以用于直达常用目录。也可以手动设置权重数据库，很方便。</p><h5 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h5><ol><li><code>git clone git://github.com/joelthelion/autojump.git</code></li><li><code>cd autojump./install.py or ./uninstall.py</code><h5 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h5><code>j dir</code>直达转到对应的目录去<br><code>autojump -a [dir]</code>在数据库中添加一个目录<br><code>autojump -i [value]</code>提升当前目录的权重<br><code>autojump -d [value]</code>降低当前目录的权重<br><code>autojump -s</code>显示数据库中的统计数据<br><code>autojump --purge</code> 清除不再需要的目录</li></ol>]]></content:encoded>
      
      <comments>https://ningoy.github.io/2018/05/30/Linux%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E4%B8%80%E5%91%A8%E8%AE%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>561. Array Partition I</title>
      <link>https://ningoy.github.io/2018/05/05/561-Array-Partition-I/</link>
      <guid>https://ningoy.github.io/2018/05/05/561-Array-Partition-I/</guid>
      <pubDate>Sat, 05 May 2018 07:42:00 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;Given an array of &lt;strong&gt;2n&lt;/strong&gt; integers, your task is to group these integers into &lt;strong&gt;n&lt;/strong&gt; pairs of intege
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>Given an array of <strong>2n</strong> integers, your task is to group these integers into <strong>n</strong> pairs of integer, say (a1, b1), (a2, b2), …, (an, bn) which makes sum of min(ai, bi) for all i from 1 to n as large as possible. </p></blockquote><p><strong>Example 1:</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,4,3,2]</span><br><span class="line"></span><br><span class="line">Output: 4</span><br><span class="line">Explanation: n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> </p><ol><li><strong>n</strong> is a positive integer, which is in the range of [1, 10000].</li><li>All the integers in the array will be in the range of [-10000, 10000].</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">arrayPairSum</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">20001</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : nums)&#123;</span><br><span class="line">            count[i + <span class="number">10000</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">boolean</span> odd = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count.length; i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(count[i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(odd)&#123;</span><br><span class="line">                    res += i - <span class="number">10000</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                odd = !odd;</span><br><span class="line">                count[i]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://ningoy.github.io/2018/05/05/561-Array-Partition-I/#disqus_thread</comments>
    </item>
    
    <item>
      <title>面试题2：实现Singleton模式</title>
      <link>https://ningoy.github.io/2018/03/24/%E9%9D%A2%E8%AF%95%E9%A2%982%EF%BC%9A%E5%AE%9E%E7%8E%B0Singleton%E6%A8%A1%E5%BC%8F/</link>
      <guid>https://ningoy.github.io/2018/03/24/%E9%9D%A2%E8%AF%95%E9%A2%982%EF%BC%9A%E5%AE%9E%E7%8E%B0Singleton%E6%A8%A1%E5%BC%8F/</guid>
      <pubDate>Sat, 24 Mar 2018 09:22:02 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;一、什么是单例模式&quot;&gt;&lt;a href=&quot;#一、什么是单例模式&quot; class=&quot;headerlink&quot; title=&quot;一、什么是单例模式&quot;&gt;&lt;/a&gt;一、什么是单例模式&lt;/h3&gt;&lt;p&gt;因程序需要，有时我们只需要某个类同时保留一个对象，不希望有更多对象，此时，我们则应该
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="一、什么是单例模式"><a href="#一、什么是单例模式" class="headerlink" title="一、什么是单例模式"></a>一、什么是单例模式</h3><p>因程序需要，有时我们只需要某个类同时保留一个对象，不希望有更多对象，此时，我们则应该考虑单例模式的设计。</p><h3 id="二、单例模式的特点"><a href="#二、单例模式的特点" class="headerlink" title="二、单例模式的特点"></a>二、单例模式的特点</h3><ol><li>单例模式只能有一个实例。</li><li>单例模式必须创建自己的唯一实例。</li><li>单例模式必须向其他对象提供这一实例。</li></ol><h3 id="三、单例模式-vs-静态类"><a href="#三、单例模式-vs-静态类" class="headerlink" title="三、单例模式 vs 静态类"></a>三、单例模式 vs 静态类</h3><ol><li>单例模式可以继承和被继承，方法可以被override，而静态方法不可以。</li><li>静态方法中产生的对象会在执行后被释放，进而被GC清理，不会一直存在于内存中。</li><li>静态类会在第一次运行时初始化，单例模式可以有其他的选择，即可以延迟加载。</li><li>基于2、3条，由于单例对象往往存在于DAO层，如果反复的初始化和释放，则会占用很多资源，而使用单例模式将其常驻于内存可以更加节约资源。</li><li>静态方法有更高的访问效率。</li><li>单例模式很容易被测试。</li></ol><p>几个关于静态类的误解：</p><ul><li>静态方法常驻内存而实例方法不是。<ul><li>实际上，特殊编写的实例方法可以常驻内存，而静态方法需要不断初始化和释放。</li></ul></li><li>静态方法在堆(heap)上，实例方法在栈(stack)上。<ul><li>实际上，都是加载到特殊的不可写的代码内存区域中</li></ul></li><li>静态类和单例模式情景的选择<ul><li>不需要维持任何状态，仅仅用于全局访问，此时更适合使用静态类。</li><li>需要维持一些特定的状态，此时更适合使用单例模式。</li></ul></li></ul><h3 id="四、单例模式的实现"><a href="#四、单例模式的实现" class="headerlink" title="四、单例模式的实现"></a>四、单例模式的实现</h3><ol><li><p>懒汉模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemo <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            instance=<span class="keyword">new</span> SingletonDemo();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，通过提供一个静态的对象<code>instance</code>，利用<code>private</code>权限的构造方法和<code>getInstance()</code>方法来给予访问者一个单例。</p><p>缺点是，没有考虑到线程安全，可能存在多个访问者同时访问，并同时构造了多个对象的问题。之所以叫做懒汉模式，主要是因为此种方法可以非常明显的lazy loading。</p><p>针对懒汉模式线程不安全的问题，我们自然想到了，在 <code>getInstance()</code> 方法前加锁，于是就有了第二种实现.</p></li><li><p>线程安全的懒汉模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingletonDemo <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            instance=<span class="keyword">new</span> SingletonDemo();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而并发其实是一种特殊情况，大多时候这个锁占用的额外资源都浪费了，这种打补丁方式写出来的结构效率很低。</p></li><li><p>饿汉模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo instance=<span class="keyword">new</span> SingletonDemo();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemo <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接在运行这个类的时候进行一次loading，之后直接访问。显然，这种方法没有起到lazy loading的效果，考虑到前面提到的和静态类的对比，这种方法只比静态类多了一个内存常驻而已。</p></li><li><p>静态类内部加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo instance=<span class="keyword">new</span> SingletonDemo();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Singleton has loaded"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemo <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>枚举方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> SingletonDemo&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">otherMethods</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Something"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Effective Java作者Josh Bloch 提倡的方式，在我看来简直是来自神的写法。解决了以下三个问题：</p><p>(1)自由序列化。</p><p>(2)保证只有一个实例。</p><p>(3)线程安全。</p><p>如果我们想调用它的方法时，仅需要以下操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        SingletonDemo.INSTANCE.otherMethods();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>双重校验锁法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> SingletonDemo instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Singleton has loaded"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemo <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SingletonDemo.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance=<span class="keyword">new</span> SingletonDemo();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我解释一下在并发时，双重校验锁法会有怎样的情景：</p><p>STEP 1. 线程A访问<code>getInstance()</code>方法，因为单例还没有实例化，所以进入了锁定块。</p><p>STEP 2. 线程B访问<code>getInstance()</code>方法，因为单例还没有实例化，得以访问接下来代码块，而接下来代码块已经被线程1锁定。</p><p>STEP 3. 线程A进入下一判断，因为单例还没有实例化，所以进行单例实例化，成功实例化后退出代码块，解除锁定。</p><p>STEP 4. 线程B进入接下来代码块，锁定线程，进入下一判断，因为已经实例化，退出代码块，解除锁定。</p><p>STEP 5. 线程A获取到了单例实例并返回，线程B没有获取到单例并返回Null。</p><p>理论上双重校验锁法是线程安全的，并且，这种方法实现了<code>lazyloading</code>。</p></li></ol>]]></content:encoded>
      
      <comments>https://ningoy.github.io/2018/03/24/%E9%9D%A2%E8%AF%95%E9%A2%982%EF%BC%9A%E5%AE%9E%E7%8E%B0Singleton%E6%A8%A1%E5%BC%8F/#disqus_thread</comments>
    </item>
    
    <item>
      <title>1076. Wifi密码（15）</title>
      <link>https://ningoy.github.io/2018/03/17/1076-Wifi%E5%AF%86%E7%A0%81%EF%BC%8815%EF%BC%89/</link>
      <guid>https://ningoy.github.io/2018/03/17/1076-Wifi%E5%AF%86%E7%A0%81%EF%BC%8815%EF%BC%89/</guid>
      <pubDate>Sat, 17 Mar 2018 12:06:59 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;下面是微博上流传的一张照片：“各位亲爱的同学们，鉴于大家有时需要使用wifi，又怕耽误亲们的学习，现将wifi密码设置为下列数学题答案：A-1；B-2；C-3；D-4；请同学们自己作答，每两日一换。谢谢合作！！~”—— 老师们为了促进学生学习也是拼了…… 本题就要求你写程序
        
      
      </description>
      
      <content:encoded><![CDATA[<p>下面是微博上流传的一张照片：“各位亲爱的同学们，鉴于大家有时需要使用wifi，又怕耽误亲们的学习，现将wifi密码设置为下列数学题答案：A-1；B-2；C-3；D-4；请同学们自己作答，每两日一换。谢谢合作！！~”—— 老师们为了促进学生学习也是拼了…… 本题就要求你写程序把一系列题目的答案按照卷子上给出的对应关系翻译成wifi的密码。这里简单假设每道选择题都有4个选项，有且只有1个正确答案。</p><p><img src="http://nos.patest.cn/pp_ozun9idw8pr.jpg" alt="微博上流传的一张图片"></p><p><strong>输入格式：</strong></p><p>输入第一行给出一个正整数N（&lt;= 100），随后N行，每行按照“编号-答案”的格式给出一道题的4个选项，“T”表示正确选项，“F”表示错误选项。选项间用空格分隔。</p><p><strong>输出格式：</strong></p><p>在一行中输出wifi密码。</p><p>输入样例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">A-T B-F C-F D-F</span><br><span class="line">C-T B-F A-F D-F</span><br><span class="line">A-F D-F C-F B-T</span><br><span class="line">B-T A-F C-F D-F</span><br><span class="line">B-F D-T A-F C-F</span><br><span class="line">A-T C-F B-F D-F</span><br><span class="line">D-T B-F C-F A-F</span><br><span class="line">C-T A-F B-F D-F</span><br></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13224143</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Pattern pattern = Pattern.compile(<span class="string">"\\w-T"</span>);</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> n = scanner.nextInt();</span><br><span class="line">    scanner.nextLine(); <span class="comment">// 读掉数字后面的一个回车符</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      Matcher matcher = pattern.matcher(scanner.nextLine());</span><br><span class="line">      <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">        System.out.print(matcher.group().charAt(<span class="number">0</span>) - <span class="string">'A'</span> + <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    scanner.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://ningoy.github.io/2018/03/17/1076-Wifi%E5%AF%86%E7%A0%81%EF%BC%8815%EF%BC%89/#disqus_thread</comments>
    </item>
    
    <item>
      <title>导入CSV文件到MySQL</title>
      <link>https://ningoy.github.io/2017/11/29/%E5%AF%BC%E5%85%A5CSV%E6%96%87%E4%BB%B6%E5%88%B0MySQL/</link>
      <guid>https://ningoy.github.io/2017/11/29/%E5%AF%BC%E5%85%A5CSV%E6%96%87%E4%BB%B6%E5%88%B0MySQL/</guid>
      <pubDate>Wed, 29 Nov 2017 11:37:44 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;从网上下载了一个&lt;a href=&quot;https://www.capitalbikeshare.com/system-data&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;公开数据集&lt;/a&gt;，想要用来做一点小实验。下载之后发现这是一个&lt;code&gt;.csv&lt;/
        
      
      </description>
      
      <content:encoded><![CDATA[<p>从网上下载了一个<a href="https://www.capitalbikeshare.com/system-data" target="_blank" rel="noopener">公开数据集</a>，想要用来做一点小实验。下载之后发现这是一个<code>.csv</code>格式的文件，里面大概有50多万条数据。那么下一步就是要把这些数据导入到数据库里。</p><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>用<code>python</code>的<code>pymysql</code>库来操作，先连接数据库，然后创建数据表，再构造出<code>sql</code>语句，把数据一条一条导进去。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'2016-Q1-Trips-History-Data.csv'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> csv_file:</span><br><span class="line">        spam_reader = csv.reader(csv_file, delimiter=<span class="string">','</span>)</span><br><span class="line">        headers = next(spam_reader)</span><br><span class="line">        db = pymysql.connect(<span class="string">'localhost'</span>, <span class="string">'username'</span>, <span class="string">'password'</span>, <span class="string">'tripshistorydata'</span>)</span><br><span class="line">        cursor = db.cursor()</span><br><span class="line">        cursor.execute(<span class="string">'DROP TABLE IF EXISTS temp;'</span>)</span><br><span class="line">        sql = <span class="string">"""</span></span><br><span class="line"><span class="string">            create table temp(</span></span><br><span class="line"><span class="string">            Duration int not null,</span></span><br><span class="line"><span class="string">            StartDate char(50) not null,</span></span><br><span class="line"><span class="string">            EndDate char(50) not null,</span></span><br><span class="line"><span class="string">            StartStationNumber int not null,</span></span><br><span class="line"><span class="string">            StartStation char(100) not null,</span></span><br><span class="line"><span class="string">            EndStationNumber int not null,</span></span><br><span class="line"><span class="string">            EndStation char(100) not null,</span></span><br><span class="line"><span class="string">            BikeNumber Char(50) not null,</span></span><br><span class="line"><span class="string">            MemberType char(50) not null);</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">        cursor.execute(sql)</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> spam_reader:</span><br><span class="line">            param = (</span><br><span class="line">                int(row[<span class="number">0</span>]), row[<span class="number">1</span>], row[<span class="number">2</span>], int(row[<span class="number">3</span>]), row[<span class="number">4</span>], int(row[<span class="number">5</span>]), row[<span class="number">6</span>], row[<span class="number">7</span>], row[<span class="number">8</span>]</span><br><span class="line">            )</span><br><span class="line">            sql = <span class="string">"""insert into temp(</span></span><br><span class="line"><span class="string">            Duration, StartDate, EndDate, StartStationNumber, StartStation, EndStationNumber, EndStation, BikeNumber, MemberType</span></span><br><span class="line"><span class="string">            ) values(%s, %s, %s, %s, %s, %s, %s, %s, %s);"""</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                cursor.execute(sql, param)</span><br><span class="line">                db.commit()</span><br><span class="line">                <span class="comment"># 记住这句话</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                print(e)</span><br><span class="line">                db.rollback()</span><br><span class="line">        </span><br><span class="line">        db.close()</span><br><span class="line">    stop = time.time()</span><br><span class="line">    cost = stop - start</span><br><span class="line">    print(cost)</span><br></pre></td></tr></table></figure><p>但是吧，这么写实在太慢，睡了一个午觉还没导入完。那不行啊，那么有没有更快的办法呢？</p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>答案当然是有的，为什么会那么慢，那是因为每一次<code>insert</code>的时候都会<code>commit</code>一次，这样当然会消耗很多时间。如果等所有数据都<code>insert</code>之后，只执行一次<code>commit</code>，当然就会快很多了。</p><p>然后嘞，还可以去<code>my.ini</code>里修改<code>innodb_flush_log_at_trx_commit</code>这么一个参数。</p><ul><li><p>当<code>innodb_flush_log_at_trx_commit=1</code>时，每次事务提交时MySQL都会把<code>log buffer</code>的数据写入<code>log file</code>，并且flush，该模式为系统默认。</p><blockquote><p>该模式是最安全的，但也是最慢的一种方式。在<code>mysqld</code>服务崩溃或者服务器主机<code>crash</code>的情况下，<code>binary log</code>只有可能丢失最多一个语句或者一个事务。</p></blockquote></li><li><p>当<code>innodb_flush_log_at_trx_commit=0</code>时，<code>log buffer</code>将每秒一次地写入<code>log file</code>中，并且<code>log file</code>的flush操作同时进行。该模式下在事务提交的时候，不会主动触发写入磁盘的操作。</p><blockquote><p>该模式速度最快，但不太安全，<code>mysqld</code>进程的崩溃会导致上一秒钟所有事务数据的丢失。</p></blockquote></li><li><p>当<code>innodb_flush_log_at_trx_commit=2</code>时，每次事务提交时MySQL都会把<code>log buffer</code>的数据写入<code>log file</code>，但是flush操作并不会同时进行。该模式下，MySQL会每秒执行一次 flush操作。</p><blockquote><p>该模式速度较快，也比<code>innodb_flush_log_at_trx_commit=0</code>安全，只有在操作系统崩溃或者系统断电的情况下，上一秒钟所有事务数据才可能丢失。</p></blockquote></li></ul><p>综合起来，设置<code>innodb_flush_log_at_trx_commit=2</code>，然后重启MySQL服务器</p><p>看看这次需要多长的时间。</p><font color="red">264.5988073348999s</font><h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><p><strong>MySQL有一个高效的导入方法，那就是<code>load data infile</code>。 </strong></p><p>语法如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span>  [<span class="keyword">low_priority</span>] [<span class="keyword">local</span>] <span class="keyword">infile</span> <span class="string">'file_name txt'</span> [<span class="keyword">replace</span> | <span class="keyword">ignore</span>]</span><br><span class="line"><span class="keyword">into</span> <span class="keyword">table</span> tbl_name</span><br><span class="line">[<span class="keyword">fields</span></span><br><span class="line">[<span class="keyword">terminated</span> <span class="keyword">by</span><span class="string">'t'</span>]</span><br><span class="line">[<span class="keyword">OPTIONALLY</span>] <span class="keyword">enclosed</span> <span class="keyword">by</span> <span class="string">''</span>]</span><br><span class="line">[<span class="keyword">escaped</span> <span class="keyword">by</span><span class="string">'\' ]]</span></span><br><span class="line"><span class="string">[lines terminated by'</span>n<span class="string">']</span></span><br><span class="line"><span class="string">[ignore number lines]</span></span><br><span class="line"><span class="string">[(col_name,   )]</span></span><br></pre></td></tr></table></figure><p><code>load data infile</code>语句从一个文本文件中以很高的速度读入一个表中。使用这个命令之前，<code>mysqld</code>进程（服务）必须已经在运行。为了安全原因，当读取位于服务器上的文本文件时，文件必须处于数据库目录或可被所有人读取。另外，为了对服务器上文件使用<code>load data infile</code>，在服务器主机上你必须有<code>file</code>的权限。</p><ol><li>如果你指定关键词<code>low_priority</code>，那么MySQL将会等到没有其他人读这个表的时候，才把插入数据。</li><li>如果指定<code>local</code>关键词，则表明从客户主机读文件。如果没指定<code>local</code>，文件必须位于服务器上。</li><li><code>replace</code>和<code>ignore</code>关键词控制对现有的唯一键记录的重复的处理。如果你指定<code>replace</code>，新行将代替有相同的唯一键值的现有行。如果你指定<code>ignore</code>，跳过有唯一键的现有行的重复行的输入。如果你不指定任何一个选项，当找到重复键时，出现一个错误，并且文本文件的余下部分被忽略。</li><li>分隔符<ol><li><code>fields</code>关键字指定了文件记段的分割格式，如果用到这个关键字，MySQL剖析器希望看到至少有下面的一个选项：<ul><li><code>terminated by</code> 字段的分隔符</li><li><code>enclosed by</code> 字段括起字符</li><li><code>escaped by</code>  转义字符\</li></ul></li></ol></li></ol><p>代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LOAD</span> <span class="keyword">DATA</span> <span class="keyword">LOCAL</span> <span class="keyword">INFILE</span> <span class="string">'FileName'</span> <span class="keyword">REPLACE</span> </span><br><span class="line"><span class="keyword">INTO</span> <span class="keyword">TABLE</span> TableName</span><br><span class="line"><span class="keyword">FIELDS</span> </span><br><span class="line"><span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">','</span> </span><br><span class="line"><span class="keyword">OPTIONALLY</span> <span class="keyword">ENCLOSED</span> <span class="keyword">BY</span> <span class="string">''</span></span><br><span class="line"><span class="keyword">LINES</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'\n'</span></span><br><span class="line"><span class="keyword">IGNORE</span> <span class="number">1</span> <span class="keyword">lines</span>;</span><br></pre></td></tr></table></figure><font color="red">64.813s</font>]]></content:encoded>
      
      <comments>https://ningoy.github.io/2017/11/29/%E5%AF%BC%E5%85%A5CSV%E6%96%87%E4%BB%B6%E5%88%B0MySQL/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
