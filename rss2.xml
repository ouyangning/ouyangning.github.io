<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>关爱颈椎成长协会</title>
    <link>https://ningoy.github.io/</link>
    <atom:link href="/ningoy.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Tue, 31 Mar 2020 12:35:19 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>处理数据常用的命令行工具</title>
      <link>https://ningoy.github.io/2020/03/27/%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link>
      <guid>https://ningoy.github.io/2020/03/27/%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid>
      <pubDate>Fri, 27 Mar 2020 15:03:09 GMT</pubDate>
      <description>
      
        
        
          &lt;h4 id=&quot;head-amp-tail&quot;&gt;&lt;a href=&quot;#head-amp-tail&quot; class=&quot;headerlink&quot; title=&quot;head &amp;amp; tail&quot;&gt;&lt;/a&gt;head &amp;amp; tail&lt;/h4&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;he
        
      
      </description>
      
      <content:encoded><![CDATA[<h4 id="head-amp-tail"><a href="#head-amp-tail" class="headerlink" title="head &amp; tail"></a>head &amp; tail</h4><hr><ol><li><p><code>head</code> 默认打印出文件的前<code>10</code> 行，<code>tail</code> 默认打印出文件的最后<code>10</code> 行。</p></li><li><p>也可以使用<code>head -n 5 shakespeare_6.0.json</code> 或是 <code>head -5 shakespeare_6.0.json</code> 打印出前<code>5</code> 行。用<code>tail -n 5 shakespeare_6.0.json</code> 或 <code>tail -5 shakespeare_6.0.json</code> 打印出文件最后<code>5</code> 行。</p></li><li><p><code>head -n 10010 listings.csv | tail -10</code> 和 <code>tail -n +10001 listings.csv | head -n 10</code> 表示同一个意思，即是打印 <code>10001-10010</code> 行。</p></li><li><p><code>tail -f listings.csv</code> 这个命令既打印 <code>listings.csv</code> 文件的最后<code>10</code> 行，也能在<code>listings.csv</code> 文件行数增长时，继续打印新增的行。</p></li></ol><h4 id="tr"><a href="#tr" class="headerlink" title="tr"></a>tr</h4><ol><li><p><code>head -n 10 listings.csv | tr &#39;,&#39; &#39;\t&#39;</code>  可以将<code>.csv</code> 文件中的<code>,</code> 分隔符换成<code>\t</code> 分隔符。</p></li><li><p><code>head -n 10 listings.csv | tr -d &#39;,&#39;</code> 可以将<code>.csv</code> 文件中的<code>,</code> 分隔符去掉。</p></li><li><p><code>head -n 10 listings.csv | tr &quot;[:lower:]&quot; &quot;[:upper:]&quot;</code> 可以将 <code>.csv</code> 文件中的小写字母换成大写字母，而这是通过<code>[:class:]</code> 做到的。</p><ul><li><code>[:alnum:]</code> 所有字母和数字</li></ul></li></ol><ul><li><code>[:alpha:]</code> 所有字母<ul><li><code>[:blank:]</code> 所有水平空白</li></ul></li><li><code>[:cntrl:]</code> 所有控制字符<ul><li><code>[:digit:]</code> 所有数字</li></ul></li><li><code>[:graph:]</code> 所有可打印字符，但不包括空格<ul><li><code>[:lower:]</code> 所有小写字母</li></ul></li><li><code>[:print:]</code> 所有可打印字符，包括空格<ul><li><code>[:punct:]</code> 所有标点符号</li></ul></li><li><code>[:space:]</code> 所有水平或垂直空白<ul><li><code>[:upper:]</code> 所有大写字母</li></ul></li><li><code>[:xdigit:]</code> 所有 16 进制数字</li></ul><h4 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h4><ol><li><code>wc -l listings.csv</code> 打印 <code>listings.csv</code> 的行数。</li></ol><h4 id="sort-amp-uniq"><a href="#sort-amp-uniq" class="headerlink" title="sort &amp; uniq"></a>sort &amp; uniq</h4><ol><li><p><code>uniq</code> 只作用于重复的相邻行，因此最好先对要处理的文件进行<code>sort</code> 。</p></li><li><p><code>head -500 listings.csv | awk -F &#39;,&#39; &#39;{print $6}&#39; | sort | uniq -c | sort -nr</code> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> sort 先排序，使得重复的行相邻便于uniq统计</span><br><span class="line"><span class="meta">#</span> 之后uniq -c 统计每一行重复的次数</span><br><span class="line"><span class="meta">#</span> 再通过sort -nr降序排列</span><br><span class="line"><span class="meta">#</span> 这样可以很快找到重复次数最多的一行</span><br><span class="line">    201 朝阳区 / Chaoyang</span><br><span class="line">     65 东城区</span><br><span class="line">     53 </span><br><span class="line">     34 海淀区</span><br><span class="line">     27 西城区</span><br><span class="line">     24 丰台区 / Fengtai</span><br><span class="line">     14 顺义区 / Shunyi</span><br><span class="line">     12 昌平区</span><br><span class="line">     12 怀柔区 / Huairou</span><br><span class="line">      6 通州区 / Tongzhou</span><br><span class="line">      5 密云县 / Miyun</span><br></pre></td></tr></table></figure></li><li><p><code>head -10 reviews.csv | tr &#39;,&#39; &#39; &#39; | sort -t&quot; &quot; -k2,2</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -t 选项将" "指定为分隔符</span><br><span class="line"><span class="meta">#</span> -k 选项用来确定排序的键</span><br><span class="line"><span class="meta">#</span> -k2,2 意为 第2列为开始列 第2列为结束列</span><br><span class="line">44054 2010-08-25</span><br><span class="line">44054 2010-10-13</span><br><span class="line">44054 2011-08-11</span><br><span class="line">44054 2012-04-12</span><br><span class="line">44054 2012-08-30</span><br><span class="line">44054 2012-09-28</span><br><span class="line">44054 2012-10-04</span><br><span class="line">44054 2012-11-15</span><br><span class="line">44054 2013-03-08</span><br><span class="line">listing_id date</span><br></pre></td></tr></table></figure></li><li><p><code>head -n +100 reviews.csv | tail -10  | tr &#39;,&#39; &#39; &#39; | sort -t&quot; &quot; -k1n,1</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -k1n,1 意为 第1列为开始列 第2列为结束列 同时第一列为数字 采用数字大小排序</span><br><span class="line">100213 2017-08-27</span><br><span class="line">100213 2017-10-08</span><br><span class="line">128496 2011-06-02</span><br><span class="line">128496 2011-06-05</span><br><span class="line">128496 2011-08-02</span><br><span class="line">128496 2011-08-26</span><br><span class="line">128496 2011-09-04</span><br><span class="line">128496 2011-09-07</span><br><span class="line">128496 2011-09-12</span><br><span class="line">128496 2011-09-19</span><br></pre></td></tr></table></figure></li></ol><h4 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h4><ol><li><code>cut</code> 用于选择列，<code>cut -d&#39;,&#39; -f 1,3 listings.csv | head -10</code> 选择第1列和第3列。</li><li><code>head listings.csv | cut -d &#39;,&#39; -f 6-</code> 选择第6列以后的（包括第6列）所有列。</li></ol><h4 id="jq"><a href="#jq" class="headerlink" title="jq"></a>jq</h4><ol><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">head -n 4 shakespeare_6.0.json</span><br><span class="line"></span><br><span class="line">&#123;"index":&#123;"_index":"shakespeare","_id":0&#125;&#125;</span><br><span class="line">&#123;"type":"act","line_id":1,"play_name":"Henry IV", "speech_number":"","line_number":"","speaker":"","text_entry":"ACT I"&#125;</span><br><span class="line">&#123;"index":&#123;"_index":"shakespeare","_id":1&#125;&#125;</span><br><span class="line">&#123;"type":"scene","line_id":2,"play_name":"Henry IV","speech_number":"","line_number":"","speaker":"","text_entry":"SCENE I. London. The palace."&#125;</span><br><span class="line"></span><br><span class="line">head -n 4 shakespeare_6.0.json | jq</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "index": &#123;</span><br><span class="line">    "_index": "shakespeare",</span><br><span class="line">    "_id": 0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  "type": "act",</span><br><span class="line">  "line_id": 1,</span><br><span class="line">  "play_name": "Henry IV",</span><br><span class="line">  "speech_number": "",</span><br><span class="line">  "line_number": "",</span><br><span class="line">  "speaker": "",</span><br><span class="line">  "text_entry": "ACT I"</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  "index": &#123;</span><br><span class="line">    "_index": "shakespeare",</span><br><span class="line">    "_id": 1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  "type": "scene",</span><br><span class="line">  "line_id": 2,</span><br><span class="line">  "play_name": "Henry IV",</span><br><span class="line">  "speech_number": "",</span><br><span class="line">  "line_number": "",</span><br><span class="line">  "speaker": "",</span><br><span class="line">  "text_entry": "SCENE I. London. The palace."</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">head -n 4 shakespeare_6.0.json | jq ".text_entry"</span><br><span class="line"></span><br><span class="line">null</span><br><span class="line">"ACT I"</span><br><span class="line">null</span><br><span class="line">"SCENE I. London. The palace."</span><br></pre></td></tr></table></figure></li></ol>]]></content:encoded>
      
      <comments>https://ningoy.github.io/2020/03/27/%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/#disqus_thread</comments>
    </item>
    
    <item>
      <title>561. Array Partition I</title>
      <link>https://ningoy.github.io/2018/05/05/561-Array-Partition-I/</link>
      <guid>https://ningoy.github.io/2018/05/05/561-Array-Partition-I/</guid>
      <pubDate>Sat, 05 May 2018 07:42:00 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;Given an array of &lt;strong&gt;2n&lt;/strong&gt; integers, your task is to group these integers into &lt;strong&gt;n&lt;/strong&gt; pairs of intege
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>Given an array of <strong>2n</strong> integers, your task is to group these integers into <strong>n</strong> pairs of integer, say (a1, b1), (a2, b2), …, (an, bn) which makes sum of min(ai, bi) for all i from 1 to n as large as possible. </p></blockquote><p><strong>Example 1:</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,4,3,2]</span><br><span class="line"></span><br><span class="line">Output: 4</span><br><span class="line">Explanation: n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> </p><ol><li><strong>n</strong> is a positive integer, which is in the range of [1, 10000].</li><li>All the integers in the array will be in the range of [-10000, 10000].</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">arrayPairSum</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">20001</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : nums)&#123;</span><br><span class="line">            count[i + <span class="number">10000</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">boolean</span> odd = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count.length; i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(count[i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(odd)&#123;</span><br><span class="line">                    res += i - <span class="number">10000</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                odd = !odd;</span><br><span class="line">                count[i]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://ningoy.github.io/2018/05/05/561-Array-Partition-I/#disqus_thread</comments>
    </item>
    
    <item>
      <title>面试题2：实现Singleton模式</title>
      <link>https://ningoy.github.io/2018/03/24/%E9%9D%A2%E8%AF%95%E9%A2%982%EF%BC%9A%E5%AE%9E%E7%8E%B0Singleton%E6%A8%A1%E5%BC%8F/</link>
      <guid>https://ningoy.github.io/2018/03/24/%E9%9D%A2%E8%AF%95%E9%A2%982%EF%BC%9A%E5%AE%9E%E7%8E%B0Singleton%E6%A8%A1%E5%BC%8F/</guid>
      <pubDate>Sat, 24 Mar 2018 09:22:02 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;一、什么是单例模式&quot;&gt;&lt;a href=&quot;#一、什么是单例模式&quot; class=&quot;headerlink&quot; title=&quot;一、什么是单例模式&quot;&gt;&lt;/a&gt;一、什么是单例模式&lt;/h3&gt;&lt;p&gt;因程序需要，有时我们只需要某个类同时保留一个对象，不希望有更多对象，此时，我们则应该
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="一、什么是单例模式"><a href="#一、什么是单例模式" class="headerlink" title="一、什么是单例模式"></a>一、什么是单例模式</h3><p>因程序需要，有时我们只需要某个类同时保留一个对象，不希望有更多对象，此时，我们则应该考虑单例模式的设计。</p><h3 id="二、单例模式的特点"><a href="#二、单例模式的特点" class="headerlink" title="二、单例模式的特点"></a>二、单例模式的特点</h3><ol><li>单例模式只能有一个实例。</li><li>单例模式必须创建自己的唯一实例。</li><li>单例模式必须向其他对象提供这一实例。</li></ol><h3 id="三、单例模式-vs-静态类"><a href="#三、单例模式-vs-静态类" class="headerlink" title="三、单例模式 vs 静态类"></a>三、单例模式 vs 静态类</h3><ol><li>单例模式可以继承和被继承，方法可以被override，而静态方法不可以。</li><li>静态方法中产生的对象会在执行后被释放，进而被GC清理，不会一直存在于内存中。</li><li>静态类会在第一次运行时初始化，单例模式可以有其他的选择，即可以延迟加载。</li><li>基于2、3条，由于单例对象往往存在于DAO层，如果反复的初始化和释放，则会占用很多资源，而使用单例模式将其常驻于内存可以更加节约资源。</li><li>静态方法有更高的访问效率。</li><li>单例模式很容易被测试。</li></ol><p>几个关于静态类的误解：</p><ul><li>静态方法常驻内存而实例方法不是。<ul><li>实际上，特殊编写的实例方法可以常驻内存，而静态方法需要不断初始化和释放。</li></ul></li><li>静态方法在堆(heap)上，实例方法在栈(stack)上。<ul><li>实际上，都是加载到特殊的不可写的代码内存区域中</li></ul></li><li>静态类和单例模式情景的选择<ul><li>不需要维持任何状态，仅仅用于全局访问，此时更适合使用静态类。</li><li>需要维持一些特定的状态，此时更适合使用单例模式。</li></ul></li></ul><h3 id="四、单例模式的实现"><a href="#四、单例模式的实现" class="headerlink" title="四、单例模式的实现"></a>四、单例模式的实现</h3><ol><li><p>懒汉模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemo <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            instance=<span class="keyword">new</span> SingletonDemo();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，通过提供一个静态的对象<code>instance</code>，利用<code>private</code>权限的构造方法和<code>getInstance()</code>方法来给予访问者一个单例。</p><p>缺点是，没有考虑到线程安全，可能存在多个访问者同时访问，并同时构造了多个对象的问题。之所以叫做懒汉模式，主要是因为此种方法可以非常明显的lazy loading。</p><p>针对懒汉模式线程不安全的问题，我们自然想到了，在 <code>getInstance()</code> 方法前加锁，于是就有了第二种实现.</p></li><li><p>线程安全的懒汉模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingletonDemo <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            instance=<span class="keyword">new</span> SingletonDemo();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而并发其实是一种特殊情况，大多时候这个锁占用的额外资源都浪费了，这种打补丁方式写出来的结构效率很低。</p></li><li><p>饿汉模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo instance=<span class="keyword">new</span> SingletonDemo();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemo <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接在运行这个类的时候进行一次loading，之后直接访问。显然，这种方法没有起到lazy loading的效果，考虑到前面提到的和静态类的对比，这种方法只比静态类多了一个内存常驻而已。</p></li><li><p>静态类内部加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo instance=<span class="keyword">new</span> SingletonDemo();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Singleton has loaded"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemo <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>枚举方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> SingletonDemo&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">otherMethods</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Something"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Effective Java作者Josh Bloch 提倡的方式，在我看来简直是来自神的写法。解决了以下三个问题：</p><p>(1)自由序列化。</p><p>(2)保证只有一个实例。</p><p>(3)线程安全。</p><p>如果我们想调用它的方法时，仅需要以下操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        SingletonDemo.INSTANCE.otherMethods();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>双重校验锁法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> SingletonDemo instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Singleton has loaded"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemo <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SingletonDemo.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance=<span class="keyword">new</span> SingletonDemo();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我解释一下在并发时，双重校验锁法会有怎样的情景：</p><p>STEP 1. 线程A访问<code>getInstance()</code>方法，因为单例还没有实例化，所以进入了锁定块。</p><p>STEP 2. 线程B访问<code>getInstance()</code>方法，因为单例还没有实例化，得以访问接下来代码块，而接下来代码块已经被线程1锁定。</p><p>STEP 3. 线程A进入下一判断，因为单例还没有实例化，所以进行单例实例化，成功实例化后退出代码块，解除锁定。</p><p>STEP 4. 线程B进入接下来代码块，锁定线程，进入下一判断，因为已经实例化，退出代码块，解除锁定。</p><p>STEP 5. 线程A获取到了单例实例并返回，线程B没有获取到单例并返回Null。</p><p>理论上双重校验锁法是线程安全的，并且，这种方法实现了<code>lazyloading</code>。</p></li></ol>]]></content:encoded>
      
      <comments>https://ningoy.github.io/2018/03/24/%E9%9D%A2%E8%AF%95%E9%A2%982%EF%BC%9A%E5%AE%9E%E7%8E%B0Singleton%E6%A8%A1%E5%BC%8F/#disqus_thread</comments>
    </item>
    
    <item>
      <title>导入CSV文件到MySQL</title>
      <link>https://ningoy.github.io/2017/11/29/%E5%AF%BC%E5%85%A5CSV%E6%96%87%E4%BB%B6%E5%88%B0MySQL/</link>
      <guid>https://ningoy.github.io/2017/11/29/%E5%AF%BC%E5%85%A5CSV%E6%96%87%E4%BB%B6%E5%88%B0MySQL/</guid>
      <pubDate>Wed, 29 Nov 2017 11:37:44 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;从网上下载了一个&lt;a href=&quot;https://www.capitalbikeshare.com/system-data&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;公开数据集&lt;/a&gt;，想要用来做一点小实验。下载之后发现这是一个&lt;code&gt;.csv&lt;/
        
      
      </description>
      
      <content:encoded><![CDATA[<p>从网上下载了一个<a href="https://www.capitalbikeshare.com/system-data" target="_blank" rel="noopener">公开数据集</a>，想要用来做一点小实验。下载之后发现这是一个<code>.csv</code>格式的文件，里面大概有50多万条数据。那么下一步就是要把这些数据导入到数据库里。</p><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>用<code>python</code>的<code>pymysql</code>库来操作，先连接数据库，然后创建数据表，再构造出<code>sql</code>语句，把数据一条一条导进去。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'2016-Q1-Trips-History-Data.csv'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> csv_file:</span><br><span class="line">        spam_reader = csv.reader(csv_file, delimiter=<span class="string">','</span>)</span><br><span class="line">        headers = next(spam_reader)</span><br><span class="line">        db = pymysql.connect(<span class="string">'localhost'</span>, <span class="string">'username'</span>, <span class="string">'password'</span>, <span class="string">'tripshistorydata'</span>)</span><br><span class="line">        cursor = db.cursor()</span><br><span class="line">        cursor.execute(<span class="string">'DROP TABLE IF EXISTS temp;'</span>)</span><br><span class="line">        sql = <span class="string">"""</span></span><br><span class="line"><span class="string">            create table temp(</span></span><br><span class="line"><span class="string">            Duration int not null,</span></span><br><span class="line"><span class="string">            StartDate char(50) not null,</span></span><br><span class="line"><span class="string">            EndDate char(50) not null,</span></span><br><span class="line"><span class="string">            StartStationNumber int not null,</span></span><br><span class="line"><span class="string">            StartStation char(100) not null,</span></span><br><span class="line"><span class="string">            EndStationNumber int not null,</span></span><br><span class="line"><span class="string">            EndStation char(100) not null,</span></span><br><span class="line"><span class="string">            BikeNumber Char(50) not null,</span></span><br><span class="line"><span class="string">            MemberType char(50) not null);</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">        cursor.execute(sql)</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> spam_reader:</span><br><span class="line">            param = (</span><br><span class="line">                int(row[<span class="number">0</span>]), row[<span class="number">1</span>], row[<span class="number">2</span>], int(row[<span class="number">3</span>]), row[<span class="number">4</span>], int(row[<span class="number">5</span>]), row[<span class="number">6</span>], row[<span class="number">7</span>], row[<span class="number">8</span>]</span><br><span class="line">            )</span><br><span class="line">            sql = <span class="string">"""insert into temp(</span></span><br><span class="line"><span class="string">            Duration, StartDate, EndDate, StartStationNumber, StartStation, EndStationNumber, EndStation, BikeNumber, MemberType</span></span><br><span class="line"><span class="string">            ) values(%s, %s, %s, %s, %s, %s, %s, %s, %s);"""</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                cursor.execute(sql, param)</span><br><span class="line">                db.commit()</span><br><span class="line">                <span class="comment"># 记住这句话</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                print(e)</span><br><span class="line">                db.rollback()</span><br><span class="line">        </span><br><span class="line">        db.close()</span><br><span class="line">    stop = time.time()</span><br><span class="line">    cost = stop - start</span><br><span class="line">    print(cost)</span><br></pre></td></tr></table></figure><p>但是吧，这么写实在太慢，睡了一个午觉还没导入完。那不行啊，那么有没有更快的办法呢？</p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>答案当然是有的，为什么会那么慢，那是因为每一次<code>insert</code>的时候都会<code>commit</code>一次，这样当然会消耗很多时间。如果等所有数据都<code>insert</code>之后，只执行一次<code>commit</code>，当然就会快很多了。</p><p>然后嘞，还可以去<code>my.ini</code>里修改<code>innodb_flush_log_at_trx_commit</code>这么一个参数。</p><ul><li><p>当<code>innodb_flush_log_at_trx_commit=1</code>时，每次事务提交时MySQL都会把<code>log buffer</code>的数据写入<code>log file</code>，并且flush，该模式为系统默认。</p><blockquote><p>该模式是最安全的，但也是最慢的一种方式。在<code>mysqld</code>服务崩溃或者服务器主机<code>crash</code>的情况下，<code>binary log</code>只有可能丢失最多一个语句或者一个事务。</p></blockquote></li><li><p>当<code>innodb_flush_log_at_trx_commit=0</code>时，<code>log buffer</code>将每秒一次地写入<code>log file</code>中，并且<code>log file</code>的flush操作同时进行。该模式下在事务提交的时候，不会主动触发写入磁盘的操作。</p><blockquote><p>该模式速度最快，但不太安全，<code>mysqld</code>进程的崩溃会导致上一秒钟所有事务数据的丢失。</p></blockquote></li><li><p>当<code>innodb_flush_log_at_trx_commit=2</code>时，每次事务提交时MySQL都会把<code>log buffer</code>的数据写入<code>log file</code>，但是flush操作并不会同时进行。该模式下，MySQL会每秒执行一次 flush操作。</p><blockquote><p>该模式速度较快，也比<code>innodb_flush_log_at_trx_commit=0</code>安全，只有在操作系统崩溃或者系统断电的情况下，上一秒钟所有事务数据才可能丢失。</p></blockquote></li></ul><p>综合起来，设置<code>innodb_flush_log_at_trx_commit=2</code>，然后重启MySQL服务器</p><p>看看这次需要多长的时间。</p><font color="red">264.5988073348999s</font><h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><p><strong>MySQL有一个高效的导入方法，那就是<code>load data infile</code>。 </strong></p><p>语法如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span>  [<span class="keyword">low_priority</span>] [<span class="keyword">local</span>] <span class="keyword">infile</span> <span class="string">'file_name txt'</span> [<span class="keyword">replace</span> | <span class="keyword">ignore</span>]</span><br><span class="line"><span class="keyword">into</span> <span class="keyword">table</span> tbl_name</span><br><span class="line">[<span class="keyword">fields</span></span><br><span class="line">[<span class="keyword">terminated</span> <span class="keyword">by</span><span class="string">'t'</span>]</span><br><span class="line">[<span class="keyword">OPTIONALLY</span>] <span class="keyword">enclosed</span> <span class="keyword">by</span> <span class="string">''</span>]</span><br><span class="line">[<span class="keyword">escaped</span> <span class="keyword">by</span><span class="string">'\' ]]</span></span><br><span class="line"><span class="string">[lines terminated by'</span>n<span class="string">']</span></span><br><span class="line"><span class="string">[ignore number lines]</span></span><br><span class="line"><span class="string">[(col_name,   )]</span></span><br></pre></td></tr></table></figure><p><code>load data infile</code>语句从一个文本文件中以很高的速度读入一个表中。使用这个命令之前，<code>mysqld</code>进程（服务）必须已经在运行。为了安全原因，当读取位于服务器上的文本文件时，文件必须处于数据库目录或可被所有人读取。另外，为了对服务器上文件使用<code>load data infile</code>，在服务器主机上你必须有<code>file</code>的权限。</p><ol><li>如果你指定关键词<code>low_priority</code>，那么MySQL将会等到没有其他人读这个表的时候，才把插入数据。</li><li>如果指定<code>local</code>关键词，则表明从客户主机读文件。如果没指定<code>local</code>，文件必须位于服务器上。</li><li><code>replace</code>和<code>ignore</code>关键词控制对现有的唯一键记录的重复的处理。如果你指定<code>replace</code>，新行将代替有相同的唯一键值的现有行。如果你指定<code>ignore</code>，跳过有唯一键的现有行的重复行的输入。如果你不指定任何一个选项，当找到重复键时，出现一个错误，并且文本文件的余下部分被忽略。</li><li>分隔符<ol><li><code>fields</code>关键字指定了文件记段的分割格式，如果用到这个关键字，MySQL剖析器希望看到至少有下面的一个选项：<ul><li><code>terminated by</code> 字段的分隔符</li><li><code>enclosed by</code> 字段括起字符</li><li><code>escaped by</code>  转义字符\</li></ul></li></ol></li></ol><p>代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LOAD</span> <span class="keyword">DATA</span> <span class="keyword">LOCAL</span> <span class="keyword">INFILE</span> <span class="string">'FileName'</span> <span class="keyword">REPLACE</span> </span><br><span class="line"><span class="keyword">INTO</span> <span class="keyword">TABLE</span> TableName</span><br><span class="line"><span class="keyword">FIELDS</span> </span><br><span class="line"><span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">','</span> </span><br><span class="line"><span class="keyword">OPTIONALLY</span> <span class="keyword">ENCLOSED</span> <span class="keyword">BY</span> <span class="string">''</span></span><br><span class="line"><span class="keyword">LINES</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'\n'</span></span><br><span class="line"><span class="keyword">IGNORE</span> <span class="number">1</span> <span class="keyword">lines</span>;</span><br></pre></td></tr></table></figure><font color="red">64.813s</font>]]></content:encoded>
      
      <comments>https://ningoy.github.io/2017/11/29/%E5%AF%BC%E5%85%A5CSV%E6%96%87%E4%BB%B6%E5%88%B0MySQL/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Uploadify插件的使用及兼容性</title>
      <link>https://ningoy.github.io/2017/11/11/Uploadify%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%85%BC%E5%AE%B9%E6%80%A7/</link>
      <guid>https://ningoy.github.io/2017/11/11/Uploadify%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%85%BC%E5%AE%B9%E6%80%A7/</guid>
      <pubDate>Sat, 11 Nov 2017 11:02:59 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;情境&quot;&gt;&lt;a href=&quot;#情境&quot; class=&quot;headerlink&quot; title=&quot;情境&quot;&gt;&lt;/a&gt;情境&lt;/h2&gt;&lt;p&gt;要把一个使用Java编写的免费开源的轻量级CMS系统部署到服务器上，主要包括后台权限系统、CMS栏目系统、内容发布系统、简约风格换肤系统。这
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="情境"><a href="#情境" class="headerlink" title="情境"></a>情境</h2><p>要把一个使用Java编写的免费开源的轻量级CMS系统部署到服务器上，主要包括后台权限系统、CMS栏目系统、内容发布系统、简约风格换肤系统。这个系统选用的技术如下：</p><table><thead><tr><th>后端</th><th></th></tr></thead><tbody><tr><td>核心框架</td><td>Spring Framework 4.2.5</td></tr><tr><td>安全框架</td><td>Apache Shiro 1.3.2</td></tr><tr><td>视图框架</td><td>Spring MVC 4.2.5</td></tr><tr><td>缓存框架</td><td>Ehcache</td></tr><tr><td>数据库连接池</td><td>Tomcat JDBC</td></tr><tr><td>ORM框架</td><td>Spring Data JPA、Hibernate 4.3.5</td></tr><tr><td>日志管理</td><td>SLF4J 1.7.21、Log4j</td></tr><tr><td>编辑器</td><td>ueditor</td></tr><tr><td>工具类</td><td>Apache Commons、Jackson 2.8.5、POI 3.15</td></tr><tr><td>view层</td><td>JSP</td></tr><tr><td>数据库</td><td>MySQL、Oracle等关系型数据库</td></tr></tbody></table><table><thead><tr><th>前端</th><th></th></tr></thead><tbody><tr><td>DOM</td><td>jquery</td></tr><tr><td>分页</td><td>jquery</td></tr><tr><td>UI管理</td><td>common</td></tr><tr><td>UI集成</td><td>uiExtend</td></tr><tr><td>滚动条</td><td>jquery.nicescroll.min.js</td></tr><tr><td>图表</td><td>highcharts</td></tr><tr><td>3D图表</td><td>highcharts-more</td></tr><tr><td>轮播图</td><td>jquery-swipe</td></tr><tr><td>表单提交</td><td>jquery.form</td></tr><tr><td>文件上传</td><td>jquery.uploadify</td></tr><tr><td>表单验证</td><td>jquery.validator</td></tr><tr><td>展现树</td><td>jquery.ztree</td></tr><tr><td>html模版引擎</td><td>template</td></tr></tbody></table><p>在系统后台发布文章的时候，可以为文章添加一个封面<code>CoverImageUrl</code>。然而，当我选中本地的图片，点击上传之后，却发现图片并没有上传。点击保存之后，前台页面也没有出现文章的封面。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>搞明白自己遇到的问题是什么？</p><ul><li>在系统的后台管理界面发布文章时，给文章添加封面。实质上就是 一个上传图片（图片从本地移动到系统指定的路径下），并把图片的相关数据存进数据库的一个过程。</li><li>当浏览器访问文章时，再从数据库中取出图片的相关数据，渲染出来就可以了。</li></ul></li><li><p>搞明白是哪里出了问题？</p><ul><li><p>从数据流来看，图片数据就是经过前端到达后台再进入数据库的。那么是这中间的哪一环出了问题？</p></li><li><p>首先检查数据库，文章封面对应的字段<code>CoverImageUrl</code>的值没有变化，说明没有改变数据库的数据。</p></li><li><p>然后调试后台的Java代码<code>UploadController.java</code>，发现数据根本就没有传到后台。这就说明是在前台出问题的。</p></li><li><p>那么检查前台的代码，盯着看了很久还是没有发现问题，调试的时候发现，数据甚至没有传到前台的代码里，百思不得其解，在这个地方卡了很久。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"l_title w200"</span>&gt;</span>图片：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"J_toolsBar fl"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">" w200 ml10"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"attachImage"</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#attachImage"</span>).uploadify(</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">'swf'</span> : <span class="string">'$&#123;pageContext.request.contextPath&#125;/static/js/uploadify/uploadify.swf'</span>,</span><br><span class="line"><span class="string">'uploader'</span> : <span class="string">'$&#123;pageContext.request.contextPath&#125;/upload/uploadAttach'</span>,</span><br><span class="line"><span class="string">'cancelImg'</span> : <span class="string">'$&#123;pageContext.request.contextPath&#125;/static/js/uploadify/uploadify-cancel.png'</span>,</span><br><span class="line"><span class="string">'queueID'</span> : <span class="string">'fileQueue'</span>,</span><br><span class="line"><span class="string">'auto'</span> : <span class="literal">true</span>,</span><br><span class="line"><span class="string">'multi'</span> : <span class="literal">false</span>,</span><br><span class="line"><span class="string">'simUploadLimit'</span> : <span class="number">1</span>,</span><br><span class="line"><span class="string">'buttonText'</span> : <span class="string">'上传图片'</span>,</span><br><span class="line"><span class="string">'fileObjName'</span> : <span class="string">'fileData'</span>,</span><br><span class="line"><span class="string">'width'</span> : <span class="number">70</span>,</span><br><span class="line"><span class="string">'height'</span> : <span class="number">20</span>,</span><br><span class="line"><span class="string">'uploadLimit'</span>:<span class="number">3</span>,</span><br><span class="line"><span class="string">'onUploadSuccess'</span> : <span class="function"><span class="keyword">function</span>(<span class="params">file, data, response</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(data != <span class="literal">null</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> attachUrl = <span class="string">'$&#123;pageContext.request.contextPath&#125;'</span> + data;</span><br><span class="line">$(<span class="string">"#attachURL"</span>).attr(<span class="string">'src'</span>,attachUrl); </span><br><span class="line">$(<span class="string">"#coverImageUrl"</span>).val(data);</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure></li><li><p>后来灵机一动，直接搜索<code>uploadify</code>，了解了一下这个控件。发现有很多使用这个控件无法上传图片的情况，一个一个点进去看，有关于jQuery包的导入顺序的，有基于cookie信息验证身份的等等，最后确定是flash插件没有更新，终于把这个问题解决了。</p></li></ul></li><li><p>总结一下检查的步骤</p><ol><li><strong>检查是否安装Flash插件</strong><ul><li>如果检查完毕，发现没有安装，需要根据你浏览器类别，浏览器版本来进行下载对应的Flash版本，这也就是该插件的一大坑，Flash插件强关联操作系统，强关联浏览器类别，强关联具体某一类浏览器的版本。如，实际兼容Firefox4.0过程中，Flash版本对应Flash for Firefox 10，其他的版本安装上也不能使用。即IE，Firefox，chrome需要下载不同的Flash安装。</li></ul></li><li><strong>Firefox兼容问题</strong><ul><li>在项目中，处于安全性考虑，每次请求必然会做合法性校验，即请求经过相关过滤器，而登录过滤器会根据<code>sessionid</code>获取用户session登录信息。而Firefox使用Flash上传文件时，Flash本身的bug导致提交时不会带上<code>session cookie</code>，而HTTP是无状态请求，session的存在以客户端和服务端的交换标志而延续。而session的<code>sessionid</code>是存储在cookie中的，导致请求不合法。</li><li>解决方案一<ul><li>采用插件自身的<code>formData</code>属性实现</li></ul></li><li>解决方案二<ul><li>在原有请求后加上<code>;jsessionid=${pageContext.session.id}</code></li></ul></li></ul></li></ol></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>最后总结一下Debug之道</strong></p><ul><li>首先要摸清楚数据流，搞明白问题出在哪里。</li><li>要科学地利用搜索工具，你遇到的问题，别人有可能已经遇到过了，并早已经把解决方案发布在互联网上了。</li></ul>]]></content:encoded>
      
      <comments>https://ningoy.github.io/2017/11/11/Uploadify%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%85%BC%E5%AE%B9%E6%80%A7/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
